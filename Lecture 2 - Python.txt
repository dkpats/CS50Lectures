Lecture 2 - Python

Python is not a typed language.
Python inludes a type 'NoneType", keyword 'None'
Created name.Py
f strings are an efficient way to pull variables into strings
Python uses indentation (whitespace I think) to know if we are in a codeblock
Python does not need a boolean necessarily for conditional statements, but he didn't go into detail yet.
In if statements, Python syntax is "elif" not "else if"
The input function by default will return a string.
Using the int(<non-integer-variable>) function, you can convert to ingegers.
list - A mutable data type that can store anything.
tuple - is a sequence of immutable values
set - A collection of unique values, unordered and unindexed. So an element is either in a set or not, and if it is, has no defined index or location.
dict - collection of key-value pairs, what you look up is the key (the word in the example of the dictionary), and what you get when you do the looking up is the value (the definition in the dictionary example)
'#' will make a line a comment
s = set() will create a set with nothing inside of in
The function len() can give us the length of an object that is indexed.
Loop syntax: for i in <list> or for i in range(<some number>)
Dictionary syntax: dictionary1 = {d1:el1, d2:el2...}. And, you can say dictionary1[d5] = el5 
You can import functions from other files. The syntax is: from <> import <>.
Either you can import the specific funciton and simply use it, or import an entire module (file) and use dot notation to use the function, eg. moduleName.functionName()
Creating classes requires starting the following way:
class ClassName():
    def __init__(self, )
The __init__ method called a magic method, so that when we create an opbject of this class, it does something. 
So any time a class object is made, it needs to initialize. We also need to give it a parameter "self".
A "method" is a function that operates on an object.
"self" represents the object. This helps us reference the specific instances of the object.
0 can evaluate to false, so you can use 0 to evaluate something as false.
After creating and running Classes.py, I realized using the for loop syntax "for i in <list>" for lists doesn't always look at the elements in the same order.
